import cv2
import numpy as np

class ShapeDetector:
    def __init__(self):
        pass

    def detect(self, c):
        shape = "unidentified"
        peri = cv2.arcLength(c, True)
        approx = cv2.approxPolyDP(c, 0.04 * peri, True)

        if len(approx) == 3:
            shape = "triangle"
        elif len(approx) == 4:
            shape = "rectangle"
        elif len(approx) == 6:
            shape = "hexagon"
        else:
            shape = "circle"
        return shape

class ColorDetector:
    def __init__(self):
        pass

    def detect(self, image, cX, cY):
        (b, g, r) = image[cY, cX]
        if r > 200 and g < 50 and b < 50:
            color = "red"
        elif r < 50 and g > 200 and b < 50:
            color = "green"
        elif r < 50 and g < 50 and b > 200:
            color = "blue"
        else:
            color = "other"
        return color

# Load the image
image = cv2.imread('shapes.jpg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
blurred = cv2.GaussianBlur(gray, (5, 5), 0)
_, threshold = cv2.threshold(blurred, 60, 255, cv2.THRESH_BINARY)

# Find contours in the thresholded image
contours, _ = cv2.findContours(threshold, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Create instances of the detectors
shape_detector = ShapeDetector()
color_detector = ColorDetector()

# Iterate through each contour
for contour in contours:
    # Calculate the centroid of the contour
    M = cv2.moments(contour)
    cX = int(M["m10"] / M["m00"])
    cY = int(M["m01"] / M["m00"])

    # Detect the shape and color
    shape = shape_detector.detect(contour)
    color = color_detector.detect(image, cX, cY)

    # Draw the contour and the name of the shape and color on the image
    cv2.drawContours(image, [contour], -1, (0, 255, 0), 2)
    cv2.putText(image, f"{color} {shape}", (cX - 20, cY), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

# Display the image with detected contours and labels
cv2.imshow("Image", image)
cv2.waitKey(0)
cv2.destroyAllWindows()
